name: CI/CD Pipeline with Docker Hub

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 리포지토리 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. JDK 21 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. application.yml 파일 생성
      - name: Create application.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yml
          echo "${{ secrets.APPLICATION_PROPERTIES_OAUTH }}" > ./src/main/resources/application-oauth.yml
          echo "${{ secrets.APPLICATION_PROPERTIES_CLOUD }}" > ./src/main/resources/application-cloud.yml
          echo "${{ secrets.APPLICATION_PROPERTIES_SWAGGER }}" > ./src/main/resources/application-swagger.yml
          echo "${{ secrets.APPLICATION_PROPERTIES_ACTUATOR }}" > ./src/main/resources/application-actuator.yml
          
      # 4. 도커 빌드 환경 설정 (buildx 설치)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 5. 도커 로그인 (도커 허브)
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 6. 도커 이미지 빌드 및 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/zaply:latest
          # 캐시 활용해서 빌드 속도를 향상시킴
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 7. EC2로 배포
      - name: Deploy to NCP
        env:
          NCP_PEM_KEY: ${{ secrets.NCP_PEM_KEY }}
          NCP_HOST: ${{ secrets.NCP_HOST }}
          NCP_USER: ${{ secrets.NCP_USER }}
          NCP_PASS:    ${{ secrets.NCP_PASSWORD }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          echo "$NCP_PEM_KEY" > ncp_key.pem
          chmod 400 ncp_key.pem
          
          ssh -i ncp_key.pem -o StrictHostKeyChecking=no $NCP_USER@$NCP_HOST << EOF
            # 비밀번호 파이프로 넘기기 (-S: 표준입력에서 비밀번호 읽음)
            printf "%s\n" "$NCP_PASS" | sudo -S apt update
            printf "%s\n" "$NCP_PASS" | sudo -S apt install -y docker.io
          
            # 기존 컨테이너 중지 및 삭제
            docker stop zaply || true
            docker rm zaply || true
          
            # 도커 허브에서 이미지 풀
            docker pull $DOCKER_USERNAME/zaply:latest
          
            # 컨테이너 실행
            docker run -d --name zaply --network root_zaply_network --network monitoring_loki-net -p 8080:8080 $DOCKER_USERNAME/zaply:latest

          EOF
          
          rm ncp_key.pem